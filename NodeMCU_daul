#! /usr/bin/env python2.7
import argparse
import serial
import time

chunksize=48                                                            # maximum chunk size possible

def main():
    a = getArguments()
    ser = serial.Serial(a.serial, 9600, 8, "N", 1)
    changeBaud(ser, a.baud)
    
    if(a.upload):
        with open(a.upload, "r") as f:
            content = f.read()
            execLua(ser, "file.open(\""+pathToName(a.upload)+"\", \"w\")", a.verbose)
            while(len(content)>0):                                              # repeat until all of the string is been sent
                code = ",".join(map(str,map(ord,list(content[:chunksize]))))    # convert every char into string of ordinal
                execLua(ser, "file.write(string.char("+code+"))", a.verbose)    # make ESP write code to file
                content = content[chunksize:]                                   # cut off remaining content string
            execLua(ser, "file.flush();file.close()", a.verbose)

    if(a.remove):
        execLua(ser,  "file.remove(\""+pathToName(a.remove)+"\")", a.verbose)
    
    if(a.list):
        print(execLua(ser,
            "for k,v in pairs(file.list()) do \
                print(\"name:\"..k..\", size:\"..v)\
            end"))

    changeBaud(ser, 9600)
    ser.close()

################################

def getArguments():
    parser = argparse.ArgumentParser(description='Down and upload files from and to an ESP8266 running NodeMCU. Createt by MarBle.')
    parser.add_argument("-s", "--serial"  , type=str,               required=True,  help='path to serial device')
    parser.add_argument("-d", "--download", type=str,               default="",     help='downloads file from the ESP to your computer')
    parser.add_argument("-u", "--upload"  , type=str,               default="",     help='uploads file from your computer to the ESP')
    parser.add_argument("-r", "--remove"  , type=str,               default="",     help='remove file from the ESP')
    parser.add_argument("-b", "--baud"    , type=int,               default=9600,   help='change the baud rate')
    parser.add_argument("-l", "--list"    , action="store_true",                    help='list the files stored on the ESP')
    parser.add_argument("-v", "--verbose" , action="store_true",                    help='print the serial communication to the terminal')
    return parser.parse_args()

def pathToName(path): return(path.split("/")[-1].split("\\")[-1])

def execLua(ser, command, verbose=False):
    ser.write(command)
    echo = ""
    while(not (command in echo)):
        echo += ser.read()
    if(verbose): print(echo)
    ser.write("\r\n")
    echo = ""
    while(not ("\r\n> " in echo)):
        echo += ser.read()
    #print(echo)
    return(echo[:-2])

def changeBaud(ser, baud):
    ser.write("uart.setup(0," + str(baud) + ",8,0,1,1)\r\n")        # make ESP change to requested baud rate
    ser.close()                                                     # close old connection
    ser.baudrate = baud                                             # change baud rate
    time.sleep(0.5)
    ser.open()                                                      # reopen serial connection with requested baud rate
    execLua(ser, "")

if __name__ == "__main__":
    main()